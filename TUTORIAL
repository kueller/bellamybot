BellamyBot, created by Kueller917 from the Muse Board.

http://board.muse.mu/
https://twitter.com/bellamybot
    
The python files are the program and its functions. The main program is in 
bellamybot.py. The nickserv password is not included, therefore some functions
that require op may not work. Feel free to change the nick to one that works
for you if I have not given you the password myself using the config file.

LICENSE
As per the license, you may do whatever the fuck you want with this. More info
at: 
    http://www.wtfpl.net/

******************************************************************************

RUNNING THE BOT

GNU/Linux variants:
Install the "python" package, which should be in your official repositories, if 
not already installed. Open a terminal and cd into the BellamyBot folder, 
then type:
    
    python bellamybot.py

You can use the full path to run from another folder, but be sure to move the
text files to that folder first.

Windows:
Download and install the current Python version from Python's website. 
This can be found at
https://www.python.org/download/

Open up the IDLE (Python GUI) program. This will bring up the Python shell. Go 
to File > Open and find and open the bellamybot.py file. If you haven't set a
valid filepath in txtfunctions.py yet, you can open txtfunctions the same way
and edit and save. 
Now, in the bellamybot.py window, go to Run > Run Module (or F5) to run the bot. 
The main shell window will be showing the information. 

Notes:
I have not used OS X. I assume it can work the same way, or similarly, to 
Linux, being fully POSIX compliant and all. I'm sure you can also get the IDE
to run it similarly to Windows.

The implementation sometimes makes it so that the commands are entered faster 
than the IRC server can handle them. You may need to run the program a few times 
to get it to work properly. Recommended you open up an IRC client for yourself. 
If BellamyBot joins the intended channel, it worked. 

******************************************************************************

CONFIG
BellamyBot now includes a configuration file for easy setting changes.
Information, such as for the IRC connection, are required and must be valid.
Some other info is optional and has defaults. For more info see the included
config file.

******************************************************************************

USAGE
This next part will be a quick overview of the functions.

BellamyBot runs on IRC through commands beginning with a '!'. Some commands 
have following arguments and some don't.

Arguments are usually written as lists with commas, or a single following 
argument. Being a simple bot it is somewhat expected you will understand the 
commands. Bad arguments may result in unwanted behavior.

*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *

Op Commands:
    These are commands only runnable by users with op status.
    NOTE: ops and owners are not required to be added in the config file.
    However, with both of them empty, these commands cannot be run.

BOT STATES
BellamyBot has two states to signify behavior: WAKE, or SLEEP. The majority of
commands will only work if BellamyBot is "awake". Best practice is to wake it
closely before a gig begins. Commands are either:

    !wake           or
    !sleep
    
The commands can be cycled through. To view what state the bot is in use

    !bot

By default, the bot joins asleep. This can be changed in the config file
by setting state to "on".

JOIN MESSAGES
BellamyBot can greet users as they enter the channel. The welcomes can be 
triggered on or off and will only work when the bot is awake. It is recommended
to turn off join messages if the join rate gets too high. Toggle by using

    !joinmsg ARG
    
ARG can be either "on" or "off", without quotations.
By default, join messages are off. This can be changed in the config file.

GAME MODE
The bot games can be turned on or off without having to change the entire
bot state from awake or asleep. This can allow for all functioning timed
phrases and non-op setlist commands while preventing possible flooding due
to overuse of the games. The syntax is the same as for join messages.

    !gamemode ARG

Where ARG can be either "on" or "off" without quotations. The default
can be changed in the config file.  

SETLIST CONTROLS
The main purpose of BellamyBot is to control and handle Muse setlists. These 
are the list of functions to work with. For these next few functions, know 
that commands that can read setlists are accessible by everyone, and commands 
that write to setlists are only accessible by ops.

GIG SET: This sets the concert. Please keep consistent to the specified style 
when using this.

    !setgig YYYY/MM/DD VENUE/FESTIVAL, CITY/STATE/PROVINCE, COUNTRY
    
How to separate the location is up to the user, but at least include the venue
and country. Separating city and state is acceptable if called for. Use 
initials for the country. To view the current gig use !gig.

Examples:
    !setgig 2007/06/16 Wembley Stadium, London, UK
    !setgig 2013/08/13 Zepp Tokyo, Tokyo, JP

ADD SONG: This command appends a song to the current setlist, including a 
setlist with zero entries. The function can take multiple arguments and will 
add songs in order from left to right. Songs are separated by commas. The last
song should not have a comma.

    !add SONG1, SONG2, SONG3...
    
Common abbreviations as song entries will be expanded to full names. See the 
AcronymReplace function on line 5 of txtfunctions.py for a specific list. 
To view the current setlist, use !setlist

Examples:
    !add B&H                    
         writes: "Butterflies & Hurricanes"

    !add Supremacy, Panic Station, PiB      
         writes: "Supremacy, Panic Station, Plug In Baby"

POP: A call to pop will remove the last song in the setlist. This was 
previously called "!undo", now changed since undo is more proper. It
emulates the "pop" function from treating the setlist as a last in, 
first out stack, hence the name.

Example:
    !setlist
        Supremacy, Panic Station, Plug In Baby
    !pop
        output: Last song has been erased.
    !setlist
        Supremacy, Panic Station

EXPANSION CHECKING: If you are unsure of what expands to what, besides
looking at the function in txtfunctions.py you can also use the command
!exp as follows

    !exp Some argument

BellamyBot will return the possible expansion for that phrase, or notify
that there is no expansion if one does not exist.

Example:
   !exp Stockholm
        output: "There is no expansion for Stockholm"

   !exp SS
        output: "SS expands to Stockholm Syndrome"
    
REPLACE SONG: If a mistaken song is found and it is not the latest song, 
instead of using undo multiple times and rewriting the rest of the set, 
replace song can be used. As title suggests, it will replace an entered song 
with the song you give it. You can only replace one song at a time.

    !replace EXISTING SONG, NEW SONG
    
The EXISTING SONG is a song in the setlist. NEW SONG is the song to replace it.
Both parameters can be entered as acronyms. If there are more than 2 entires, 
or if the song is not found, an error will be returned by the bot. 

Example:
    !setlist                    
        output: "Plug In Baby, New Born, Uprising"

    !replace New Born, Stockholm Syndrome       
    
    !setlist                    
        output: "Plug In Baby, Stockholm Syndrome, Uprising"

INSERT SONG: Inserts a song before a specified song. This can happen anywhere
in the setlist as long as the specified song is valid. Inserting before the
first song will make a new first song. You can only insert one song at a time,
for the moment.

    !insert NEW SONG, EXISTING SONG

Notice the syntax is flipped from !replace. A good way to visualize it is to
think "insert NEW SONG _before_ EXISTING SONG". As opposed to replace which
would be "replace EXISTING SONG _with_ NEW SONG".

Example:
    !setlist
        output "Knights of Cydonia, Hysteria, Bliss"

    !insert SMBH, Hysteria

    !setlist
        output "Knights of Cydonia, Supermassive Black Hole, Hysteria, Bliss"

DELETE SONG: This is if you simply want to remove an entire slot in the 
setlist. Unlike !remove, this can delete multiple songs. The songs can also
be scattered througout the setlist.

    !delete SONG1, SONG2, SONG3...

Much like !add, you separate the song names by commas. Acronyms in place of 
song names is also valid. After entering the command BellamyBot will return
the number of songs succesfully removed.

Example:    
    !setlist                    
        output: "New Born, Supermassive Black Hole, Take A Bow, Survival"

    !delete New Born, TaB, Starlight        
        output: "Deleted 2 out of 3 songs."

    !setlist                    
        output: "Supermassive Black Hole, Survival" 

CLEAR SET: When everything is done, the setlist can be emptied by the clear 
set command.

    !clearset
    
And that's it. I don't think you need an example for it.

UNDO: This will undo the last change to the setlist and return it to its
prior form. The base state for undo is when the bot turn on, and then any
call to !clearset afterwards. Once a set is cleared it can no longer be
reverted. Undo is unlimited until it reaches a base state.

Example:
    !setlist
        Take A Bow, Starlight, Supermassive Black Hole
    !delete Starlight
        output: Deleted 1 out of 1 songs
    !setlist
        Take A Bow, Supermassive Black Hole
    !undo
    !setlist
        Take A Bow, Starlight, Supermassive Black Hole

REDO: Expectedly, acts as the inverse of !undo. Will revert any calls to
!undo until it reaches the most recent state. If, after an undo, a set is
modified, that state becomes the new highest state and redos can't be done.

Function should be self-explanatory based off !undo's example.

PREVIOUS SETLIST: When the gig is all done and everyone is complaining, it's 
time to assign the current setlist as the previous. Make sure everything is 
correct then simply run the command.

    !setprevious
    
This will copy the current setlist to the .previous file and head it with the 
current gig from the gig file (that was set using !setgig). Make sure both 
the 'setlist' and 'gig' files are accurate.

It will also copy everything to an archive file to be put into GigArchive, or 
whatever directory it's meant to go to.. BellamyBot will confirm when all 
is finished, or will print an error if the current set is empty. If the
twitter keys in text/twitter is accurate it will post the setlist to
the associated twitter account. This one is @BellamyBot.

*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *

GIG ARCHIVE
The bot offers searching tools for all gigs. These functions for search 
include !count, !lastplayed, !findset, and !loadset. The first 3 will
include parameter options.

    --range=YYYY/MM/DD:YYYY/MM/DD Specifies a specific range to scan
                 Passing -1 for either the lower or upper range will
                 make the date infinite in that direction. As in, either
                 search from the beginning or to the end. --range=-1:-1
                 is equivalent to not setting a range at all.
    --country=CC Set the 2 letter country code to limit search to a
                 specific country
    --tour=tour  Limit search to specific tour

    !count: Finds the number of times a song has been played.
    !lastplayed: Finds the last time a song was played.
    !findset: Searches a series of tokens and displays matching setlists.
              Includes the other option --strict, which will limit results
              to only sets that match all input tokens.
              Findset has lexographic parsing, so you can pass in 
              "Map of the Problematique", with quotation marks, to avoid
              getting results that match "of" and "the" separately.
    !loadset: Loads a setlist from the archive, takes in a YYYY/MM/DD format
              only. 

All search arguments are case insensitive. Hyphen options are case sensitive.

*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *

EVAL
The bot includes a Lisp-like interpreter. This can be accessed via the !eval
command. As like Lisp is functions as (command arg1, arg2, ...). The valid
functions so far are

    Arithmetic: "+,-,*,/" (remember Lisp is prefix notation)
    "if": (if (statement) do-this else-that)
    "cond": (cond ((statement) action) ((next-statement) action))
    "=": (= this that), a boolean
    "not": (not this that), boolean
    "is-mod": (is-mod $nick), boolean, checks bot's modlist
    "print": Used for auto-formatted printing, i.e. 
             (print "Something" 1 (statement arg) "done")
             All values will be converted to string and concatenated
             with spaces.

Results are printed to the channel.

*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *

CUSTOM COMMANDS
There is current support for basic text custom commands. This is done
using the !cmd command. Further extensions to the command
capabilities will be added in the future.

The !cmd command is op only. The general syntax is here:

    !cmd OPTION !command [ARGS]

OPTIONS: There are 4 options to choose from. !command is either a
new or existing command, depending on the option. It must begin with an
exclamation mark.

    add: Creates a new command. Command passed must not exist.

    edit: Replaces the text of the command with the new text written in
          ARGS. Command must exist and there has to be non-empty ARGS.

    +=: Appends new text to an existing command. A space will be added in
        between the new and existing text. Same requirements as edit.

    rename: Renames a command. !command must exist. ARGS must be in the
            same style with a prepended '!'. First command must exist
            and second command must not exist in list.

    delete: Deletes a command from the list. Command passed must exist.

Proper usage will give a confirmation message. Syntax errors will be
silently ignored.

If "$nick" is included in the body of the command it will be replaced on
call by the user who called the command. There are also input parameters
$1, $2, $3, etc. They are static though. If you use $3 you must have 3
parameters. There are no optional ones.

You can also pass in !eval as the first part of the command to make 
the command be parsed through boteval.

Commands exist in the file text/commands. The format is as follows.

[command]
name=!command
chan=#channel
body=Text of command

The file is read on startup and is written to at shutdown in this format.
Commands can be added directly to the text file. Bad formatting will
result in the command being ignored on read.

*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *

Non-op basic commands:
    These commands can be accessed by everyone. 
    
The following commands can be run even if the bot is offline:

    !bot            Displays the bot version and state.
    !gig            Displays the current set gig.

    !message MESSAGE GOES HERE
        This will write a message to the .ircmsg file and give me a 
        memo that there is a message. Use if I am afk. Change to 
        another nick (line 95 bellamybot.py) if you want someone else 
        to get the memo
    
The following commands are state dependent:

    !setlist        Lists the current setlist from the .setlist. 
                    Also tells if setlist is empty.
    !previous       Lists the previous setlist from the .previous file.
    !commands       Lists the available commands. 

    !findset        Searches the GigArchive for gigs queried by the 
                    command
    !count          Gets the number of times a queried song was played.
    !loadset        Displays a setlist by date (format YYYY/MM/DD).
    !info           Gets info on any command. See text/info.
    
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *

Non-op game commands:
    These can also be run by everyone.
    
    !closer         Gives a random closer taken from the .closer file.
    !opener         Same but for openers from the .opener file
    !realfan        You're either a REAL FAN or not. Simple binary
                    random generator.
    !ru-roulette    A game of Russian Roulette. Will NOT work if 
                    you're an op or higher.
    
    !roulette       Runs the T2L tour style roulette. Either New 
                    Born, Stockholm Syndrome, or green
    !green          If you get green, run green to get a rarity. 
                    Only valid if you land on green.
    
    !manson         Gives or takes a number of Manson guitars to a
                    nick. Stores the value offline.
    !setgen         Generates a random setlist. See setlistgenerator.py 
                    for more info.

    !setfm          Gets a random setlist from setlist.fm and prints it
                    out, along with a link. See setfm.py for more info.
                    MBID for the band can be set in the config file.

    !choice SONG    
        Sometimes BellamyBot will prompt for a crowd choice. If so it 
        will take song requests done through !choice for one minute, 
        then pick a random song from the list. Command is only valid
        for that minute.
